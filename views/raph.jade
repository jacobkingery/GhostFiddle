extends layout

block header_scripts
    script(src='/javascripts/raphael.js')
    

    script.

        window.onload = function() {
            // Raphael canvas
            var W = 3000,
                H = 700,
                r = Raphael("raphHolder", W, H);

            // Data storage    
            var lenSong = 8,
                numGlass = 8,
                notes = [],
                pauses = [];

            for (var i = 0; i < numGlass; i++) {
                notes.push([]);
                pauses.push([]);
                for (var j = 0; j < lenSong; j++) {
                    notes[i].push(0);
                }
                for (var j = 0; j < lenSong-1; j++) {
                    pauses[i].push(0);
                }
            }


            // Note selectors
            var smRadius = 10,
                lgRadius = 15,
                smRectHeight = 10,
                lgRectHeight = 15,
                horSpacing = 60,
                vertSpacing = 50,
                horOffset = 80,
                vertOffset = 40,
                noteNames = ['D', 'C#', 'B', 'A', 'G', 'F#', 'E', 'D'],
                //fills = ['#0b7661','#0e8d74','#10a587','#12bc9a','#14d3ad','#18e9bf', '#77f2da', '#acf7c8'],
                fills = ['#87E8D6','#FAE13C','#9D3CE8','#3CFA58','#E82F85','#493CFF','#E3710B','#EEEEEE'],
                glasses={};
            var makeGlass = function (color) {
                return {'glassNotes': [],
                        'glassPause': [],
                        'color': color,
                        addNote: function (note) {this.glassNotes.push(note);},
                        addPause: function (pause) {this.glassPause.push(pause);},
                        removeNote:function(){this.glassNotes.pop().circle.hide();},
                        removePause:function(){this.glassPause.pop().rect.hide();}
                        
                        };
                };
            var path = r.path("M0 0L0 0").hide();
            var makeNote = function (x,y) {
                var newNote = 
                    {'x':x,
                    'y':y,
                    'state':0,
                    'path':path = r.path("M"+(horOffset+horSpacing*y)+" "+(vertOffset+vertSpacing*x)+"L"+(horOffset+horSpacing*y)+" "+(vertOffset+vertSpacing*x))
                        .attr({'stroke-width':smRectHeight, stroke:fills[x]})
                        .hide()
                        ,
                    'circle':r.circle(horOffset+horSpacing*y, vertOffset+vertSpacing*x, smRadius)
                        .attr({fill: fills[x], stroke: fills[x], 'stroke-width': 2, 'fill-opacity': notes[x][y], 'stroke-opacity': 1})
                        .hover(function() {
                            this.animate({r: lgRadius}, 100,'elastic');
                        },
                        function() {
                            if (!notes[newNote.x][newNote.y]){
                                this.animate({r: smRadius}, 100,'elastic');
                            }
                        })
                        .drag(function(dx,dy){
                            this.animate({r: lgRadius}, 100,'elastic');
                            var pathArray = newNote.path.attr("path");
                            pathArray[1][1] = horOffset+horSpacing*newNote.y+dx;
                            if(horSpacing*newNote.y+dx > horSpacing*lenSong){
                                changeSongLength(Math.round((horSpacing*newNote.y+dx)/horSpacing)+1);
                            }
                            //pathArray[1][2] = vertOffset+vertSpacing*newNote.x+dy;
                            newNote.path.attr({path:pathArray});
                        }, function(){
                            newNote.path.show();                                                              
                            newNote.circle.animate({'fill-opacity' : 1}, 200);                                        
                        }, function(){
                            var pathArray = newNote.path.attr("path");
                            var glassesTraversed = Math.round((pathArray[1][1]-(horOffset+horSpacing*newNote.y))/horSpacing);
                            pathArray[1][1] = horOffset+horSpacing*(newNote.y+glassesTraversed);
                            newNote.path.attr({path:pathArray});
                            //- console.log(glassesTraversed);
                            if(glassesTraversed < 0){
                                for(var j = newNote.y; j>newNote.y+glassesTraversed-1 && j>=0; j--){
                                    glasses[newNote.x].glassNotes[j].highlight();
                                    if( j > newNote.y+glassesTraversed && j-1 >= 0){
                                        glasses[newNote.x].glassPause[j-1].highlight();
                                    }
                                }
                            }else if(glassesTraversed>0){
                                for(var j = newNote.y; j<newNote.y+glassesTraversed+1 && j<lenSong; j++){
                                    glasses[newNote.x].glassNotes[j].highlight();
                                    if(j<newNote.y+glassesTraversed&&j<lenSong-1){
                                        glasses[newNote.x].glassPause[j].highlight();
                                    }
                                }
                            }else{
                                var new_op = +!notes[newNote.x][newNote.y];
                                notes[newNote.x][newNote.y] = new_op; 
                                if(!new_op){
                                    notes[newNote.x][newNote.y] = 0;                        
                                    newNote.circle.animate({'fill-opacity' : 0}, 200);
                                    if(newNote.y < lenSong-1)
                                        glasses[newNote.x].glassPause[newNote.y].unhighlight();
                                    if(newNote.y-1 >= 0){
                                        glasses[newNote.x].glassPause[newNote.y-1].unhighlight();
                                    }
                                }
                            }
                            pathArray[1][1] = horOffset+horSpacing*newNote.y;
                            newNote.path.attr({path:pathArray});
                            newNote.path.hide();

                            this.dx = this.dy = 0;
                        }),
                    'highlight': (function(){
                        notes[newNote.x][newNote.y] = 1;                        
                        newNote.circle.animate({'fill-opacity' : 1}, 200);
                        newNote.circle.animate({r: lgRadius}, 100,'elastic');
                    })
                };
                return newNote;
            }
            var makePause = function (x,y){
                var newPause = 
                    {'x':x,
                    'y':y,
                    'state':0,
                    'rect':
                    r.rect(horOffset+horSpacing*y+smRadius, vertOffset+vertSpacing*x-smRadius/2, horSpacing-2*smRadius , smRectHeight)
                    .attr({fill: fills[x], stroke: fills[x], 'fill-opacity': pauses[x][y]})
                    .click(function () {
                        newPause.unhighlight();
                    })
                    .hide(),
                    'highlight': (function(){
                        pauses[newPause.x][newPause.y] = 1;
                        newPause.rect.show();
                        newPause.rect.animate({'fill-opacity' : 1}, 200);
                    }),
                    'unhighlight': (function(){
                        pauses[newPause.x][newPause.y] = 0;
                        newPause.rect.animate({'fill-opacity' : 0}, 200);
                        newPause.rect.hide();
                    })
                };
                return newPause;   
            }
            for (var i = 0; i<numGlass; i++) {
                r.text(24, 40+vertSpacing*i, noteNames[i])
                    .attr({fill: fills[i], "font-size": 36, "font-family": "Helvetica, Arial, sans-serif" });
                glasses[i]=makeGlass(fills[i]);

                for (var j = 0; j<lenSong-1; j++){
                    glasses[i].addPause(makePause(i,j));
                }
                for (var j = 0; j<lenSong; j++){
                    glasses[i].addNote(makeNote(i,j));
                }
            }
            
            //Changes the number of notes displayed
            var changeSongLength = function(newLenSong){
                    if (newLenSong > lenSong){
                        if(newLenSong>50){newLenSong = 50;}
                        for(var j = lenSong; j < newLenSong; j++){
                            for(var i = 0; i <numGlass; i++){
                                notes[i].push(0);
                                pauses[i].push(0);
                                glasses[i].addNote(makeNote(i,j));
                                glasses[i].addPause(makePause(i,j-1));
                            }
                        }
                        lenSong = newLenSong;
                        r.setSize(8*horOffset+lenSong*horSpacing,H);
                        lenDownRect.attr({'x':horOffset+lenSong*horSpacing});  
                        lenUpRect.attr({'x':horOffset+lenSong*horSpacing});   
                    }
                    else if(newLenSong < lenSong){
                        if(newLenSong<1){newLenSong = 1;}
                        for(var j = lenSong; j >newLenSong; j--){
                            for(var i = 0; i <numGlass; i++){
                                glasses[i].removeNote();
                                glasses[i].removePause();
                                notes[i].pop();
                                pauses[i].pop();
                            }
                        }
                        lenSong = newLenSong;
                        r.setSize(8*horOffset+lenSong*horSpacing,H);
                        lenDownRect.attr({'x':horOffset+lenSong*horSpacing});  
                        lenUpRect.attr({'x':horOffset+lenSong*horSpacing});                  
                    }
            };
            //Change Song Length Button
            var lenUpRect = r.rect(horOffset+lenSong*horSpacing, 150, 50, 50, 10)
                .attr({fill:"#005500"})
                .click(function(){changeSongLength(lenSong+8);
                    });
            var lenDownRect = r.rect(horOffset+lenSong*horSpacing, 240, 50, 50, 10)
                .attr({fill:"#550000"})
                .click(function(){changeSongLength(lenSong-8);
                    });

            //Save Load Cookies
            var saveSong = r.rect(300,500,100,50,10)
                    .attr({fill:"#000055"})
                    .click(function(){
                        var song = "";
                        for (var i = 0; i < pauses.length; i++) {
                            for (var j = 0; j < pauses[i].length; j++) {
                            song += notes[i][j].toString() + pauses[i][j].toString();
                            }
                        song += notes[i][notes[i].length-1].toString() + ';';
                        }
                        console.log(song);
                        setCookie('Song',song,5)
                    });
            var loadSong = r.rect(400,500,100,50,10)
                    .attr({fill:"#FFFFFF"})
                    .click(function(){
                        var cookie = getCookie('Song');
                        console.log(cookie);
                    });
            function setCookie(c_name,value,exdays){
                var exdate=new Date();
                exdate.setDate(exdate.getDate() + exdays);
                var c_value=escape(value) + ((exdays==null) ? "" : "; expires="+exdate.toUTCString());
                document.cookie=c_name + "=" + c_value;
            }
            function getCookie(c_name){
                var c_value = document.cookie;
                var c_start = c_value.indexOf(" " + c_name + "=");
                if (c_start == -1){
                    c_start = c_value.indexOf(c_name + "=");
                }
                if (c_start == -1){
                    c_value = null;
                }
                else{
                    c_start = c_value.indexOf("=", c_start) + 1;
                    var c_end = c_value.indexOf(";", c_start);
                    if (c_end == -1)
                    {
                        c_end = c_value.length;
                    }
                    c_value = unescape(c_value.substring(c_start,c_end));
                }
                return c_value;
            }

            // Submit button
            var subRect = r.rect(50, 500, 200, 60, 20)
                .attr({fill: "#3C850C", stroke: "#326E0A", 'stroke-width': 2, 'fill-opacity': .75, 'stroke-opacity': 1});                
            var subText = r.text(150,530,"Submit Song!")
                .attr({fill: "#FFFFFF", "font-size": 32, "font-family": "Helvetica, Arial, sans-serif" });
            var subButton = r.set();
            subButton.push(subRect);
            subButton.push(subText);

            subButton.hover(function() {
                this.attr({cursor: "pointer"});
                subRect.animate({'fill-opacity' : 1}, 200);
                },
                function() {
                this.attr({cursor: "default"});
                subRect.animate({'fill-opacity' : .75}, 200);
                });
            subButton.click(function() {
                var n = "";
                var p = "";
                for (var i = 0; i < numGlass; i++){
                    n += notes[i].join('')+"\n";
                    p += pauses[i].join('')+"\n";
                }

                document.getElementById('notes').value = n;
                document.getElementById('pauses').value = p;
                document.getElementById('newSong').submit();
            });

        };


block content

    img(src="/images/smokeGhost.jpg")
    div(id="raphHolder")
    div(id="formHolder")
        form(id="newSong", method="post", action="/submit")
            input(id="notes", type="hidden", name="notes")
            input(id="pauses", type="hidden", name="pauses")
    //- div(id="footer")
        | <b><a href='http://github.com/jacobkingery/GhostFiddle' style='color: #111;'>Team Ghost Fiddle</a></b>
